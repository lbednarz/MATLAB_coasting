%% load in prior infomation from PLL/DLL
% for this demo, we are interested in channels 2,3,8,9
close all; clear; clc; 
addpath 'C:\Users\logan\Documents\Repos\GNSS_SDR-master\GNSS_SDR-master'
addpath data

load("data\extras97.mat"); % should set a variable called "extra_out"
load("data\trackingResults96.mat")
dataAdaptCoeff = 1; 
channel_to_track = 8;                % channel we want to track
PRN = 13;                            % PRN in channel
frame_starts = extra_out.sample_num; % flag for each subframe 
byte_frame_start = trackResults(channel_to_track).absoluteSample(frame_starts(1,channel_to_track)); % should be 220614790
settings = initSettings();

% get RF file to track 
fileName = 'C:\Users\logan\Documents\Repos\GNSS_SDR-master\GPSStatic_BW8_gain65_10Msps__REAL.bin';
[fid, message] = fopen(fileName, 'rb');

% Move to location of first prior 
  fseek(fid, ...
    dataAdaptCoeff*byte_frame_start, ...
    'bof');

% parameters for reading raw data 
remCodePhase = 0;
codeFreq      = settings.codeFreqBasis;
codePhaseStep = codeFreq / settings.samplingFreq;

%% build priors 
% initials for position and signal quality
c = 2.99792458e8;             % speed of light in m/s
L1 = 1575.42e6;               % L1 carrier frequency
lam = c/L1;                   % carrier wavelength
Tc = 1/1.023e6;               % chip duration
Ts = settings.samplingFreq/2; % Hz sample rate
Tacc = 1e-3;                  % accumulation period (seconds) 
f_IF = settings.IF;           % intermediate frequency (Hz)

% intial estimates 
% [x_hat, y_hat, z_hat, cdtr_hat] = priors_1.state; 
priors_1 = extra_out.extras_epoch.epoch1;
x_hat = priors_1.state;

% nominal values for local replica
range = norm(priors_1.satpos(:,channel_to_track)-x_hat(1:3));
tau = priors_1.tot*1000; % travel time in ms 
rem_tau = tau - floor(tau); % retrieve just the time into current period
epsilon = .5*Tc;
dtsv = priors_1.dtsv(channel_to_track);

% other params for kalman filter 
% signal power 
PdBHz = -130;      % Signal power dB/Hz
P = 10^(PdBHz/10); % convert to V? 
%sig_P = 5e-7;      % V?
sig_P = 50;      % V?  


% Iono and tropo
tau_I = 30*60;    % About a 30-minute time constant
tau_T = 2*3600;   % About a 2-hour time constant
sig_I = 2;        % Should be about between 1-5 meters
sig_T = .5*sig_I; % Should be roughly 1/2 of Iono

% Accelerometer with bias
sig_a = 57e-6; % SD accelerometer noise m/s^1.5
sig_b = 14e-6; % Continuous SD of accelerometer bias RW noise
tau_b = 3600;  % Time constant of accelerometer bias RW

% Clock TXCO
sig_d = 5e-8 * sqrt(Ts); % Discrete clock drift noise variance

% convert ECEF pos to LOS basis 
R_EB = LOSRotationMatrix(x_hat(1:3), priors_1.satpos(:,channel_to_track))';
x_hat_LOS = R_EB*x_hat(1:3); % x_hat_LOS(1 and 2) are constant 
sv_pos_LOS = R_EB*priors_1.satpos(:,channel_to_track); % SV pos in new coordinate frame

% initial covairances
% take state vector r_r, v_r, dtr, dtrdot, I, T, b, P
P0 = priors_1.Q; % assumes states are [x, y, z, c*dtr]
P0(1:3,1:3) = R_EB*P0(1:3,1:3); % rotate into body frame
Prdt = [P0(2,2), P0(2,4); P0(4,2), P0(4,4)].*1000; % 1D pos and clock uncertainty
Pv0 = .5^2; Pdtrdot0 = 5e-5; PT0 = 3^2; PI0 = 3^2; Pb0 = (14e-3)^2; %PP0 = 1e-7^2;
PP0 = 100^2; %signal initial amplitude - anybody's guess from ADC  
P0 = diag([Prdt(1,1), Pv0, Prdt(2,2), Pdtrdot0, PI0, PT0, Pb0, PP0]);
P0(1,3) = Prdt(1,2); P0(3,1) = Prdt(1,2);

% initial states 
rk = x_hat_LOS(3);
vk = 0;
dtrk = x_hat(4)/c;   % Initial receiver clock bias
dtrdotk = 2*sig_d;   % Initial receiver clock drift
Ik = 0;
Tk = priors_1.tropo;
bk = 14e-6;          % Initial guess at bias
%ak = sqrt(2*P);
ak = 10; 

% rotate gravitational impact into body frame 
% Given Latitude in DMS format
lat_deg = 40;
lat_min = 48;
lat_sec = 33.2064;

% Convert Latitude from DMS to Decimal Degrees
lat_decimal = lat_deg + lat_min/60 + lat_sec/3600;

% Given Longitude in DMS format
lon_deg = 113; % Taking magnitude first, we'll apply the sign later
lon_min = 36;
lon_sec = 11.4036;

% Convert Longitude from DMS to Decimal Degrees
lon_decimal = -(lon_deg + lon_min/60 + lon_sec/3600); % Negative because it's west

lat_radians = deg2rad(lat_decimal);
lon_radians = deg2rad(lon_decimal);

R_ENU_to_ECEF = @(phi, lambda) ... % phi=lat, lambda = lon
    [-sin(lambda),           -sin(phi)*cos(lambda),    cos(phi)*cos(lambda);
      cos(lambda),           -sin(phi)*sin(lambda),    cos(phi)*sin(lambda);
      0,                      cos(phi),                 sin(phi)];

R_UE = R_ENU_to_ECEF(lat_radians,lon_radians);
g_ENU = [0;0;-9.81];
g_ECEF = R_UE*g_ENU;
g_adj = R_EB*g_ECEF; 
g_adj = g_adj(3); % grabbing part along LOS

%% measurement models 
% get spreading code for specified sample rate, PRN, and time of travel
% using get_x(rem_tot, PRN, Ts)
% x comes from get_x function
% isCosine allows for making I and Q replicas from 1 function 
gen_local_replica = @(x, range, I, T, dtr, dtsv, f_IF, isCosine) ...
    x .* (isCosine .* cos(2*pi/lam * (range - I + T + c*(dtr - dtsv) + lam*f_IF*Tacc)) + ...
    (1-isCosine) .* sin(2*pi/lam * (range - I + T + c*(dtr - dtsv) + lam*f_IF*Tacc)));

% Define R(epsilon) 
%samples_per_chip = .5*settings.samplingFreq*1/settings.codeFreqBasis; 
R_func = @(epsilon) (abs(epsilon) < Tc) * settings.codeLength * ...
                        .5*settings.samplingFreq/settings.codeFreqBasis * (1 - abs(epsilon)/Tc);

% Define R'(epsilon)
R_prime_func = @(epsilon) (epsilon < 0) .* (1 + 1/settings.codeLength) * settings.samplingFreq*.5/(.5*settings.samplingFreq) + ...
                          (epsilon > 0) .* -1.023e6*.5*settings.samplingFreq*1/settings.codeFreqBasis;

% define function for nominal signal measurement 
%gen_nominal_signal = @(a, epsilon, range, I, T, dtr, dtsv, isCosine) ...
gen_nominal_signal = @(a, epsilon, dtheta, isCosine) ...
    a * R_func(epsilon) .* (isCosine .* cos(dtheta) + ...
    (1-isCosine) .* sin(dtheta));

% shorthand for the derivative of of the function args wrt r_r
dr = @(r_term, sv_term, r_r, r_sv)...
     -1*(sv_term - r_term)/norm(r_sv-r_r);

% shorthand for the derivative of funtion wrt I, T, dtr 
dterm = @(a, epsilon, dtheta, isCosine,It) ...
         a/c*R_prime_func(epsilon)*(isCosine*cos(dtheta)+(1-isCosine)*(sin(dtheta))) ...
            + It*2*pi*a/lam*R_func(epsilon)*(isCosine*sin(dtheta)+(1-isCosine)*(cos(dtheta)));

dtermP = @(a, dtheta, isCosine,It) ...
      It*2*pi*a/lam*R_func(0)*(isCosine*sin(dtheta)+(1-isCosine)*(cos(dtheta)));

% here we are trying to enforce 1D, body frame movement along r_los 
% this means dr_r2,r3 are zero, but a nominal range must be provided 
% in the rotation matrix, r_r3 is along the los 
% state vector order is [r_r, dtr, I, T, a];
h_func_I = @(a, epsilon, r_r, r_sv, dtheta) ...
    [a/c * R_prime_func(epsilon) * ...
        dr(r_r(3), r_sv(3), r_r, r_sv)*cos(dtheta) ...
            - 2*pi*a/lam*R_func(epsilon)*sin(dtheta)*dr(r_r(3), r_sv(3), r_r, r_sv), ...
     dterm(a, epsilon, dtheta, 1, -1), ...
     dterm(a, epsilon, dtheta, 1,  1), ... 
     dterm(a, epsilon, dtheta, 1,  1), ... 
     R_func(epsilon)*cos(dtheta)];

h_func_Q = @(a, epsilon, r_r, r_sv, dtheta) ...
    [a/c * R_prime_func(epsilon) * ...
        dr(r_r(3), r_sv(3), r_r, r_sv)*sin(dtheta) ...
            + 2*pi*a/lam*R_func(epsilon)*cos(dtheta)*dr(r_r(3), r_sv(3), r_r, r_sv), ...
     dterm(a, epsilon, dtheta, 0, -1), ...
     dterm(a, epsilon, dtheta, 0,  1), ... 
     dterm(a, epsilon, dtheta, 0,  1), ... 
     R_func(epsilon)*sin(dtheta)];

h_func_P_I = @(a, r_r, r_sv, dtheta) ... % epsilon can only be zero
    [2*pi*a/lam*R_func(0)*cos(dtheta)*dr(r_r(3), r_sv(3), r_r, r_sv), ...
     dtermP(a, dtheta, 1, -1), ...
     dtermP(a, dtheta, 1,  1), ... 
     dtermP(a, dtheta, 1,  1), ... 
     R_func(0)*sin(dtheta)];

% CN0 estimator - only thing using I_p for now
CN0_dBHz = @(Ip, Qp, Ie, Qe, Il, Ql) ...
    10 * log10((Ip^2 + Qp^2) / (0.5 * (Ie^2 + Qe^2 + ...
    Il^2 + Ql^2))); 

% low pass filter for after signal accumulation 
fs = 10e6; % Sampling frequency, for example 10 MHz
fpass = 2.5e6; % Passband frequency
fstop = 3e6; % Stopband frequency
atten_stopband = 60; % Attenuation in the stopband in dB
% Apass = 1;     % Passband ripple (in dB) and add 'PassbandRipple', Apass,
% if you want this later 

% Design a low-pass FIR filter
lp_filter = designfilt('lowpassfir', 'PassbandFrequency', fpass, ...
                       'StopbandFrequency', fstop, 'StopbandAttenuation', atten_stopband, ...
                       'SampleRate', fs, 'DesignMethod', 'kaiserwin');


%% dynamic models 
% take state vector r_r, v_r, dtr, dtrdot, I, T, b, P
% r_{k} = r_{k-1} + (v_{k-1} + (r_dot_nominal_{k-1} - v_nominal_{k-1}))*Ts
% v_{k} = v_{k-1} + (-1*b + (v_dot_nominal_{k-1}-g_adj) - normrnd(0, sig_a))*Ts
% dtr_{k} = dtr_{k-1} + Ts*dtr_dot_{k-1} + 0.5*normrnd(0, sig_d)*Ts^2
% dtr_dot_{k} = dtr_dot_{k-1} + normrnd(0, sig_d)
% I_{k} = I_{k-1} + (-1/tau_I * I_{k} + normrnd(0, sig_I))*Ts
% T_{k} = T_{k-1} + (-1/tau_T * T_{k} + normrnd(0, sig_T))*Ts
% b_{k} = b_{k-1} + (-1/tau_b * b_{k-1} + normrnd(0, sig_b))*Ts
% P_{k} = P_{k-1} + normrnd(0, sig_P)*Ts

% Assuming values for Ts, tau_I, tau_T, tau_b, and g_adj are provided:
dt = 1e-3; % time between integration periods 
A = [1, dt, 0,  0,       0,        0,            0,    0;
     0,  1, 0,  0,       0,        0,          -dt,    0;
     0,  0, 1, dt,       0,        0,            0,    0;
     0,  0, 0,  1,       0,        0,            0,    0;
     0,  0, 0,  0,   1-dt/tau_I,   0,            0,    0;
     0,  0, 0,  0,       0,     1-dt/tau_T,      0,    0;
     0,  0, 0,  0,       0,        0,      1-dt/tau_b, 0;
     0,  0, 0,  0,       0,        0,            0,    1];

% control inputs are r_dot_nominal, v_nominal, v_dot_nominal, and gadj 
B = [dt, -dt,  0,   0;
      0,   0, dt, -dt;
      0,   0,  0,   0;
      0,   0,  0,   0;
      0,   0,  0,   0;
      0,   0,  0,   0;
      0,   0,  0,   0;
      0,   0,  0,   0];

G = diag([-dt, 0.5*dt^2, 1, dt, dt, dt, dt]);
[~,m] = size(G);
G = vertcat(zeros(1,m),G);
W = diag([sig_a^2, sig_d^2, sig_d^2, sig_I^2, sig_T^2, sig_b^2, sig_P^2]);
Q = G * W * G';

%% Tracking loop

% get navbits 
nb = double(extra_out.extra_nb{1,channel_to_track});
nb(nb == 0) = -1; % encode NB into 1s and -1s
sim_time = 30; % simulation time (s)

% get first block of raw data
%blksize = ceil((settings.codeLength-remCodePhase) / codePhaseStep);
blksize = settings.samplingFreq * 1e-3; % grab 1 ms of data 
[rawSignal, samplesRead] = fread(fid, ...
    dataAdaptCoeff*blksize, settings.dataType);

% grab I and Q components 
rawSignal = rawSignal';
rawSignal1=rawSignal(1:2:end);
rawSignal2=rawSignal(2:2:end);
rawSignal = rawSignal1 + 1i .* rawSignal2;  %transpose vector

% raw signal w/o navbit
% repeat for each measurement epoch. Next batch will get a new navbit that
% will be applicable for 20 code periods.
nb_now = nb(2);
rawSignal = nb_now*rawSignal;

% set initial covariance and states
Pk = P0;
xk = [rk, vk, dtrk, dtrdotk, Ik, Tk, bk, ak]';
counter = 1;

for i = 1:10 % each i is 1 ms  
    % TODO: may have to incorporate remainder of code/carrier phase
    % make correlators 
    early_code  = get_x(rem_tau-epsilon*1000, PRN, Ts);
    late_code   = get_x(rem_tau+epsilon*1000, PRN, Ts);
    prompt_code = get_x(rem_tau, PRN, Ts);
    LR_early_I  = gen_local_replica(early_code, range, xk(5), xk(6), xk(3), ...
                                        dtsv, f_IF, 1);
    LR_early_Q  = gen_local_replica(early_code, range, xk(5), xk(6), xk(3), ... 
                                        dtsv, f_IF, 0);
    LR_late_I   = gen_local_replica(late_code, range, xk(5), xk(6), xk(3), ...
                                        dtsv, f_IF, 1);
    LR_late_Q   = gen_local_replica(late_code, range, xk(5), xk(6), xk(3), ...
                                        dtsv, f_IF, 0);
    LR_prompt_I = gen_local_replica(prompt_code, range, xk(5), xk(6), xk(3), ...
                                        dtsv, f_IF, 1);
    LR_prompt_Q = gen_local_replica(prompt_code, range, xk(5), xk(6), xk(3), ...
                                        dtsv, f_IF, 0);

    % mix signals  
    I_E = LR_early_I  .* real(rawSignal);
    Q_E = LR_early_Q  .* imag(rawSignal);
    I_L = LR_late_I   .* real(rawSignal);
    Q_L = LR_late_Q   .* imag(rawSignal);
    I_P = LR_prompt_I .* real(rawSignal);
    Q_P = LR_prompt_Q .* imag(rawSignal);
    
    % low pass 
    I_E_bp = filter(lp_filter, I_E);
    Q_E_bp = filter(lp_filter, Q_E);
    I_L_bp = filter(lp_filter, I_L);
    Q_L_bp = filter(lp_filter, Q_L);
    I_P_bp = filter(lp_filter, I_P);
    Q_P_bp = filter(lp_filter, Q_P);

    % correlate
    I_E_filt = sum(I_E_bp);
    Q_E_filt = sum(Q_E_bp);
    I_L_filt = sum(I_L_bp);
    Q_L_filt = sum(Q_L_bp);
    I_P_filt = sum(I_P_bp);
    Q_P_filt = sum(Q_P_bp);
    
    % concatenate into measurement 
    y_filt   = [I_E_filt;Q_E_filt;I_L_filt;Q_L_filt];
    %y_filt_tmp = [I_E_filt;Q_E_filt;I_L_filt;Q_L_filt; I_P_filt; Q_P_filt];

    % estimate measurement noise
    CN0dBHz = CN0_dBHz(I_P_filt, Q_P_filt, I_E_filt, Q_E_filt, I_L_filt, Q_L_filt);
    CN0 = 10^(CN0dBHz/10); % Carrier to noise density ratio
    R = diag(1/CN0*ones(4,1)); % Variance of measurement noise on 4 measurements 

    % build linearized observation matrix for Kalman filter
    a = xk(8);
    h_I_E = h_func_I(xk(8), -1*epsilon, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
                        [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_E_filt,I_E_filt));
    h_Q_E = h_func_Q(xk(8), -1*epsilon, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
                        [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_E_filt,I_E_filt));
    h_I_L = h_func_I(xk(8), epsilon, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
                        [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_L_filt,I_L_filt));
    h_Q_L = h_func_Q(xk(8), epsilon, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
                        [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_L_filt,I_L_filt));
%     h_I_P = h_func_P_I(a, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
%                         [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_P_filt,I_P_filt));
%     h_Q_P = h_func_P_Q(a, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
%                         [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_P_filt,I_P_filt));

    % concatenate into observation matrix 
    h_star_tmp = [h_I_E;h_Q_E;h_I_L;h_Q_L];
    %h_star_tmp_tmp = [h_I_E;h_Q_E;h_I_L;h_Q_L;h_I_P;h_Q_P];
    %xk = [rk, vk, dtrk, dtrdotk, Ik, Tk, bk, ak];
    %hx_star = h_star_tmp * [rk, dtrk, Ik, Tk, a]';
    hx_star = h_star_tmp * [xk(1), xk(3), xk(5), xk(6), xk(8)]';
    % measurement does not consist of v_r, dtrdot, or b
    % add zeros to accomodate this
    h_star = [h_star_tmp(:,1), zeros(4,1), h_star_tmp(:,2), zeros(4,1), ...
                h_star_tmp(:,3:4), zeros(4,1), h_star_tmp(:,5)];    
    % get nominal measurement
    % gen_nominal_signal = @(a, epsilon, dtheta, isCosine)
    ynom_I_E = gen_nominal_signal(a, -1*epsilon, atan2(Q_E_filt,I_E_filt), 1);
    ynom_Q_E = gen_nominal_signal(a, -1*epsilon, atan2(Q_E_filt,I_E_filt), 0);
    ynom_I_L = gen_nominal_signal(a, epsilon, atan2(Q_L_filt,I_L_filt), 1);
    ynom_Q_L = gen_nominal_signal(a, epsilon, atan2(Q_L_filt,I_L_filt), 0);

    % concatenate into nominal measurement 
    y_nom    = [ynom_I_E;ynom_Q_E;ynom_I_L;ynom_Q_L];

    % form adjusted measurement 
    y_star = y_filt - y_nom + hx_star;

    dr_tmp = -1*(sv_pos_LOS(3) - rk)/norm([sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]- [x_hat_LOS(1), x_hat_LOS(2), rk]);

    % run measurement update
    K = Pk * h_star' \ (h_star * Pk * h_star' + R);
    innov = y_star - h_star*xk;
    xhatk = xk + K*(innov);
    Phatk = (eye(size(Pk)) - K*h_star)*Pk;

    % time update 
    % take state vector r_r, v_r, dtr, dtrdot, I, T, b, P
    % control inputs are r_dot_nominal, v_nominal, v_dot_nominal, and gadj
    xk = A*xhatk + B*[xk(2);xk(2);0;g_adj];
    Pk = A*Phatk*A' + Q; 
    x_hat_LOS(3) = xk(1);
    range = norm(sv_pos_LOS-x_hat_LOS); 

    % get next data block 
    [rawSignal, samplesRead] = fread(fid, ...
    dataAdaptCoeff*blksize, settings.dataType);
    % grab I and Q components 
    if mod(i,20) == 0
       counter = counter + 1;
       nb_now = nb(counter);  
    end 
    rawSignal = nb_now*rawSignal';
    rawSignal1=rawSignal(1:2:end);
    rawSignal2=rawSignal(2:2:end);
    rawSignal = rawSignal1 + 1i .* rawSignal2;  %transpose vector

    % calc new time of travel 
    tau = 1/c*(range + xk(5) + xk(6) + c*(dtrk-dtsv))*1000;
    rem_tau = tau - floor(tau);

end

    % attempt to improve prior with LSQ 
    % dJ/dx = H'(y-Hx)=0 -> (H'H)^-1*H'*y
    % where H = h_star_tmp
    
%     for j = 1:5
%       xk_tmp = pinv(h_star_tmp_tmp'*h_star_tmp_tmp) * h_star_tmp_tmp'*y_filt_tmp;
%       a = xk_tmp(end);
%       h_I_E = h_func_I(a, -1*epsilon, [x_hat_LOS(1), x_hat_LOS(2), rk]', ...
%                             [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_E_filt,I_E_filt));
%       h_Q_E = h_func_Q(a, -1*epsilon, [x_hat_LOS(1), x_hat_LOS(2), rk]', ...
%                             [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_E_filt,I_E_filt));
%       h_I_L = h_func_I(a, epsilon, [x_hat_LOS(1), x_hat_LOS(2), rk]', ...
%                             [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_L_filt,I_L_filt));
%       h_Q_L = h_func_Q(a, epsilon, [x_hat_LOS(1), x_hat_LOS(2), rk]', ...
%                             [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_L_filt,I_L_filt));
%       h_I_P = h_func_P_I(a, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
%                             [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_P_filt,I_P_filt));
%       h_Q_P = h_func_P_Q(a, [x_hat_LOS(1), x_hat_LOS(2), xk(1)]', ...
%                             [sv_pos_LOS(1), sv_pos_LOS(2), sv_pos_LOS(3)]', atan2(Q_P_filt,I_P_filt));
%       % concatenate into observation matrix 
%       h_star_tmp_tmp = [h_I_E;h_Q_E;h_I_L;h_Q_L;h_I_P;h_Q_P];
%     end
% h_func_P_Q = @(a, r_r, r_sv, dtheta) ... % epsilon can only be zero
%     [2*pi*a/lam*R_func(0)*sin(dtheta)*dr(r_r(3), r_sv(3), r_r, r_sv), ...
%      dtermP(a, dtheta, 0, -1), ...
%      dtermP(a, dtheta, 0,  1), ... 
%      dtermP(a, dtheta, 0,  1), ... 
%      R_func(0)*sin(dtheta)];